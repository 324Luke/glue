import randomstring from 'randomstring'
import { ConfigObject } from './config.controller'
import { Document } from '../entities/document.entity'
import { Repository } from 'typeorm'

export class DocumentHandler {
  private options: ConfigObject
  private repository: Repository<Document>

  constructor (options: ConfigObject, docsRepo: Repository<Document>) {
    this.options = options
    this.repository = docsRepo
  }

  private createID (): string {
    return randomstring.generate(this.options.idLength)
  }

  /**
   * Generates a unique ID for a document.
   *
   * Calls `createID()` until it generates a key that isn't already in the DB.
   */
  private chooseID (): Promise<string> {
    let id = this.createID()

    return new Promise((resolve) => {
      const doc = this.getDocument(id)

      doc.then(doc => {
        if (!doc) {
          resolve(id)
        } else {
          id = this.createID()
        }
      })
    })
  }

  /**
    * Inserts a new document into the database with:
    *   - value of `content`
    *   - an ID generated by `createID()`
    *
    * @param content - Content to insert into database
    *
    * @returns Inserted document
    */
  async newDocument (content: string): Promise<object> {
    const id = await this.chooseID()

    const doc = this.repository.create({
      id,
      content
    })

    this.repository.save(doc)

    return { ...doc }
  }

  /**
   * Searches the database for a document with `ID`
   *
   * @param id - ID of document to get
   */
  async getDocument (id: string): Promise<Document | undefined> {
    const doc = await this.repository.findOne({
      where: { id }
    })

    return doc
  }
}
